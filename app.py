# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from pylfsr import LFSR
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog, QVBoxLayout
import sys
import random
from PyQt5 import QtCore
from PyQt5.QtWidgets import *


class CustomDialog2(QDialog):

    def __init__(self, *args, **kwargs):
        super(CustomDialog2, self).__init__(*args, **kwargs)

        self.setWindowTitle("About")
        self.resize(600, 600)
        self.main = QtWidgets.QTextBrowser(self)
        self.main.document().setDefaultStyleSheet(
            'body {color: #333; font-size: 14px;} '
            'h2 {background: #CCF; color: #443;} '
            'h1 {background: #001133; color: white;} '
        )
        self.main.setStyleSheet('background-color: #EEF;')
        with open('geffe.txt', 'r') as fh:
            self.main.insertHtml(fh.read())

        self.layout = QVBoxLayout()
        self.layout.addWidget(self.main)
        self.setLayout(self.layout)

class CustomDialog(QDialog):

    def __init__(self, *args, **kwargs):
        super(CustomDialog, self).__init__(*args, **kwargs)

        self.setWindowTitle("About")
        self.resize(600, 600)
        self.main = QtWidgets.QTextBrowser(self)
        self.main.document().setDefaultStyleSheet(
            'body {color: #333; font-size: 14px;} '
            'h2 {background: #CCF; color: #443;} '
            'h1 {background: #001133; color: white;} '
        )
        self.main.setStyleSheet('background-color: #EEF;')
        with open('lfsr.txt', 'r') as fh:
            self.main.insertHtml(fh.read())

        self.layout = QVBoxLayout()
        self.layout.addWidget(self.main)
        self.setLayout(self.layout)


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Geffe Generator")
        MainWindow.resize(600, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 10, 481, 31))
        self.label.setObjectName("label")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 420, 561, 131))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 380, 61, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 90, 51, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 160, 51, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 230, 51, 31))
        self.label_5.setObjectName("label_5")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(70, 90, 181, 41))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(70, 160, 181, 41))
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.plainTextEdit_4 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_4.setGeometry(QtCore.QRect(70, 230, 181, 41))
        self.plainTextEdit_4.setObjectName("plainTextEdit_4")
        self.plainTextEdit_5 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_5.setGeometry(QtCore.QRect(280, 90, 181, 41))
        self.plainTextEdit_5.setObjectName("plainTextEdit_5")
        self.plainTextEdit_6 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_6.setGeometry(QtCore.QRect(280, 160, 181, 41))
        self.plainTextEdit_6.setObjectName("plainTextEdit_6")
        self.plainTextEdit_7 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_7.setGeometry(QtCore.QRect(280, 230, 181, 41))
        self.plainTextEdit_7.setObjectName("plainTextEdit_7")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(110, 50, 91, 31))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(340, 50, 91, 31))
        self.label_7.setObjectName("label_7")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(230, 310, 131, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 310, 131, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(430, 310, 131, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(480, 90, 111, 31))
        self.label_8.setObjectName("label_8")
        self.plainTextEdit_8 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_8.setGeometry(QtCore.QRect(480, 130, 91, 31))
        self.plainTextEdit_8.setObjectName("plainTextEdit_8")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(490, 200, 91, 31))
        self.label_10.setObjectName("label_10")
        self.plainTextEdit_9 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_9.setGeometry(QtCore.QRect(480, 240, 91, 31))
        self.plainTextEdit_9.setObjectName("plainTextEdit_9")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(90, 380, 471, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 21))
        self.menubar.setObjectName("menubar")
        self.menuClear = QtWidgets.QMenu(self.menubar)
        self.menuClear.setObjectName("menuClear")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionLFSR = QtWidgets.QAction(MainWindow)
        self.actionLFSR.setObjectName("actionLFSR")
        self.actionLSFR = QtWidgets.QAction(MainWindow)
        self.actionLSFR.setObjectName("actionLSFR")
        self.actionGeffe_2 = QtWidgets.QAction(MainWindow)
        self.actionGeffe_2.setObjectName("actionGeffe_2")
        self.actionClear = QtWidgets.QAction(MainWindow)
        self.actionClear.setObjectName("actionClear")
        self.menuClear.addAction(self.actionLSFR)
        self.menuClear.addAction(self.actionGeffe_2)
        self.menuClear.addAction(self.actionClear)
        self.menubar.addAction(self.menuClear.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Geffe Generator"))
        self.label.setToolTip(_translate("MainWindow",
                                         "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label.setWhatsThis(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label.setText(_translate("MainWindow",
                                      "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_2.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_2.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">Output:</span></p></body></html>"))
        self.label_3.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_3.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">LFSR1:</span></p></body></html>"))
        self.label_4.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_4.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">LFSR2:</span></p></body></html>"))
        self.label_5.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_5.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">LFSR3:</span></p></body></html>"))
        self.label_6.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_6.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_6.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">Polynomial</span></p></body></html>"))
        self.label_7.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_7.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">State</span></p></body></html>"))
        self.pushButton_2.setText(_translate("MainWindow", "Generate to file"))
        self.pushButton_3.setText(_translate("MainWindow", "Generate"))
        self.pushButton_4.setText(_translate("MainWindow", "Randomize"))
        self.label_8.setToolTip(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_8.setWhatsThis(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_8.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt;\">Max Polynomial</span></p></body></html>"))
        self.label_10.setToolTip(_translate("MainWindow",
                                            "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_10.setWhatsThis(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Geffe Generator</span></p></body></html>"))
        self.label_10.setText(_translate("MainWindow",
                                         "<html><head/><body><p align=\"justify\"><span style=\" font-size:11pt;\">Output size</span></p></body></html>"))
        self.menuClear.setTitle(_translate("MainWindow", "Help"))

        self.actionLSFR.setText(_translate("MainWindow", "LFSR"))
        self.actionGeffe_2.setText(_translate("MainWindow", "Geffe"))
        self.actionClear.setText(_translate("MainWindow", "Clear"))

    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.retranslateUi(self)

        self.progressBar.setValue(0)

        self.pushButton_2.clicked.connect(self.generate_to_file)
        self.pushButton_3.clicked.connect(self.generate)
        self.pushButton_4.clicked.connect(self.randomize)
        self.actionClear.triggered.connect(self.clear)
        self.actionLSFR.triggered.connect(self.help)
        self.actionGeffe_2.triggered.connect(self.help2)
        # self.actionOpen.triggered.connect(self.open)
        # self.actionSave_as.triggered.connect(self.save)

    def help(self, checked):
        dlg = CustomDialog(self)
        dlg.exec_()

    def help2(self, checked):
        dlg2 = CustomDialog2(self)
        dlg2.exec_()

    def randomize(self):
        try:
            maks = int(self.plainTextEdit_8.toPlainText())
            list1 = randomlist(maks)
            list2 = randomlist(maks)
            list3 = randomlist(maks)
            list4 = randomstate(max(list1))
            list5 = randomstate(max(list2))
            list6 = randomstate(max(list3))

            self.plainTextEdit_2.setPlainText(str(list1).strip('[]'))
            self.plainTextEdit_3.setPlainText(str(list2).strip('[]'))
            self.plainTextEdit_4.setPlainText(str(list3).strip('[]'))
            self.plainTextEdit_5.setPlainText(str(list4).strip('[]'))
            self.plainTextEdit_6.setPlainText(str(list5).strip('[]'))
            self.plainTextEdit_7.setPlainText(str(list6).strip('[]'))
        except:
            QMessageBox.about(self, "Error", "Set all needed informations!")

    def generate_to_file(self, checked):
        try:
            fileName = self.saveFileDialog()

            if fileName != "":
                file = open(fileName, "w")
            else:
                return

            maks = int(self.plainTextEdit_9.toPlainText())

            str1 = self.plainTextEdit_2.toPlainText()
            str2 = self.plainTextEdit_3.toPlainText()
            str3 = self.plainTextEdit_4.toPlainText()
            str4 = self.plainTextEdit_5.toPlainText()
            str5 = self.plainTextEdit_6.toPlainText()
            str6 = self.plainTextEdit_7.toPlainText()

            poly1 = list(map(int, str1.split(", ")))
            poly2 = list(map(int, str2.split(", ")))
            poly3 = list(map(int, str3.split(", ")))
            state1 = list(map(int, str4.split(", ")))
            state2 = list(map(int, str5.split(", ")))
            state3 = list(map(int, str6.split(", ")))

            L1 = LFSR(fpoly=poly1, initstate=state1, verbose=False)
            L2 = LFSR(fpoly=poly2, initstate=state2, verbose=False)
            L3 = LFSR(fpoly=poly3, initstate=state3, verbose=False)
            a = []

            for x in range(maks):
                L1.next()
                L2.next()
                L3.next()
                out = (L3.outbit & L1.outbit) ^ ((1 ^ L1.outbit) & L2.outbit)
                self.progressBar.setValue(int((x/maks)*100))
                a.append(out)

            self.progressBar.setValue(100)

            if fileName != "":
                file = open(fileName, "w")
                file.write(''.join(map(str, a)))

            self.plainTextEdit.setPlainText(''.join(map(str, a)))
        except:
            QMessageBox.about(self, "Error", "Set all needed informations!")

    def generate(self):
        try:
            maks = int(self.plainTextEdit_9.toPlainText())

            str1 = self.plainTextEdit_2.toPlainText()
            str2 = self.plainTextEdit_3.toPlainText()
            str3 = self.plainTextEdit_4.toPlainText()
            str4 = self.plainTextEdit_5.toPlainText()
            str5 = self.plainTextEdit_6.toPlainText()
            str6 = self.plainTextEdit_7.toPlainText()

            poly1 = list(map(int, str1.split(", ")))
            poly2 = list(map(int, str2.split(", ")))
            poly3 = list(map(int, str3.split(", ")))
            state1 = list(map(int, str4.split(", ")))
            state2 = list(map(int, str5.split(", ")))
            state3 = list(map(int, str6.split(", ")))

            L1 = LFSR(fpoly=poly1, initstate=state1, verbose=False)
            L2 = LFSR(fpoly=poly2, initstate=state2, verbose=False)
            L3 = LFSR(fpoly=poly3, initstate=state3, verbose=False)
            a = []
            n = 0

            for x in range(maks):
                L1.next()
                L2.next()
                L3.next()
                out = (L3.outbit & L1.outbit) ^ ((1 ^ L1.outbit) & L2.outbit)
                self.progressBar.setValue(int((x / maks) * 100))
                a.append(out)

            self.progressBar.setValue(100)

            self.plainTextEdit.setPlainText(''.join(map(str, a)))
        except:
            QMessageBox.about(self, "Error", "Set all needed informations!")



    def help(self, checked):
        dlg = CustomDialog(self)
        dlg.exec_()

    def clear(self, checked):
        self.plainTextEdit.setPlainText('')
        self.plainTextEdit_2.setPlainText('')
        self.plainTextEdit_3.setPlainText('')
        self.plainTextEdit_4.setPlainText('')
        self.plainTextEdit_5.setPlainText('')
        self.plainTextEdit_6.setPlainText('')
        self.plainTextEdit_7.setPlainText('')
        self.plainTextEdit_8.setPlainText('')
        self.plainTextEdit_9.setPlainText('')

    def save(self):
        fileName = self.saveFileDialog()
        if fileName != "":
            file = open(fileName, "w")
            text = self.plainTextEdit_2.toPlainText()
            file.write(text)

    def saveFileDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self, "QFileDialog.getSaveFileName()", "",
                                                  "All Files (*);;Text Files (*.txt)", options=options)
        if fileName != "":
            return fileName
        else:
            return ""


def randomlist(max):
    list1 = range(2, max + 1)
    n = random.randint(2, max)
    if n > 2:
        list = random.sample(list1, n - 1)
    if n <= 2:
        list = random.sample(list1, n)
    list.sort(reverse=True)
    return list


def randomstate(len):
    list = []
    for _ in range(len):
        x = random.randint(0, 1)
        list.append(x)
    return list


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Ui_MainWindow()
    window.show()
    sys.exit(app.exec_())
